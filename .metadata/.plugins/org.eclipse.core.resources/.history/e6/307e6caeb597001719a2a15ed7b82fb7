package l03.controller;

public class TabulaController {

	public static void main(String[] args) {


	}



	private void extractFile(File pdfFile, Appendable outFile) throws ParseException {
		PDDocument pdfDocument = null;
		try {
			pdfDocument = this.password == null ? PDDocument.load(pdfFile) : PDDocument.load(pdfFile, this.password);
			PageIterator pageIterator = getPageIterator(pdfDocument);
			List<Table> tables = new ArrayList<Table>();

			while (pageIterator.hasNext()) {
				Page page = pageIterator.next();

				if (pageArea != null) {
					page = page.getArea(pageArea);
				}

				tables.addAll(tableExtractor.extractTables(page));
			}
			writeTables(tables, outFile);
		} catch (IOException e) {
			throw new ParseException(e.getMessage());
		} finally {
			try {
				if (pdfDocument != null) {
					pdfDocument.close();
				}
			} catch (IOException e) {
				System.out.println("Error in closing pdf document" + e);
			}
		}
	}

	private PageIterator getPageIterator(PDDocument pdfDocument) throws IOException {
		ObjectExtractor extractor = new ObjectExtractor(pdfDocument);
		return (pages == null) ?
				extractor.extract() :
					extractor.extract(pages);
	}

	// CommandLine parsing methods

	private static OutputFormat whichOutputFormat(CommandLine line) throws ParseException {
		if (!line.hasOption('f')) {
			return OutputFormat.CSV;
		}

		try {
			return OutputFormat.valueOf(line.getOptionValue('f'));
		} catch (IllegalArgumentException e) {
			throw new ParseException(String.format(
					"format %s is illegal. Available formats: %s",
					line.getOptionValue('f'),
					Utils.join(",", OutputFormat.formatNames())));
		}
	}

	private static Rectangle whichArea(CommandLine line) throws ParseException {
		if (!line.hasOption('a')) {
			return null;
		}

		List<Float> f = parseFloatList(line.getOptionValue('a'));
		if (f.size() != 4) {
			throw new ParseException("area parameters must be top,left,bottom,right");
		}
		return new Rectangle(f.get(0), f.get(1), f.get(3) - f.get(1), f.get(2) - f.get(0));
	}

	private static List<Integer> whichPages(CommandLine line) throws ParseException {
		String pagesOption = line.hasOption('p') ? line.getOptionValue('p') : "1";
		return Utils.parsePagesOption(pagesOption);
	}

	private static ExtractionMethod whichExtractionMethod(CommandLine line) {
		// -r/--spreadsheet [deprecated; use -l] or -l/--lattice
		if (line.hasOption('r') || line.hasOption('l')) {
			return ExtractionMethod.SPREADSHEET;
		}

		// -n/--no-spreadsheet [deprecated; use -t] or  -c/--columns or -g/--guess or -t/--stream
		if (line.hasOption('n') || line.hasOption('c') || line.hasOption('g') || line.hasOption('t')) {
			return ExtractionMethod.BASIC;
		}
		return ExtractionMethod.DECIDE;
	}

	private static TableExtractor createExtractor(CommandLine line) throws ParseException {
		TableExtractor extractor = new TableExtractor();
		extractor.setGuess(line.hasOption('g'));
		extractor.setMethod(CommandLineApp.whichExtractionMethod(line));
		extractor.setUseLineReturns(line.hasOption('u'));

		if (line.hasOption('c')) {
			extractor.setVerticalRulingPositions(parseFloatList(line.getOptionValue('c')));
		}
		return extractor;

	}
